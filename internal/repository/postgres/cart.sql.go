// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package postgres

import (
	"context"
)

const createCart = `-- name: CreateCart :one
INSERT INTO public.tb_amole_cart(tac_member_id, tac_total_price, tac_status)
VALUES($1, $2, $3) RETURNING tac_id, tac_member_id, tac_total_price, tac_status
`

type CreateCartParams struct {
	TacMemberID   int32  `json:"tac_member_id"`
	TacTotalPrice int32  `json:"tac_total_price"`
	TacStatus     string `json:"tac_status"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (TbAmoleCart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.TacMemberID, arg.TacTotalPrice, arg.TacStatus)
	var i TbAmoleCart
	err := row.Scan(
		&i.TacID,
		&i.TacMemberID,
		&i.TacTotalPrice,
		&i.TacStatus,
	)
	return i, err
}

const getCartAndCartItemsByMemberIdAndActiveStatus = `-- name: GetCartAndCartItemsByMemberIdAndActiveStatus :one
SELECT tac_id, tac_member_id, tac_total_price tac_status, taci.taci_id, taci.taci_cart_id, taci.taci_product_id, taci.taci_qty, taci.taci_price
FROM public.tb_amole_cart as tac 
JOIN public.tb_amole_cart_items as taci ON taci.taci_cart_id=tac.tac_id
WHERE tac_member_id = $1 AND tac_status = 'ACTIVATE'
`

type GetCartAndCartItemsByMemberIdAndActiveStatusRow struct {
	TacID         int64 `json:"tac_id"`
	TacMemberID   int32 `json:"tac_member_id"`
	TacStatus     int32 `json:"tac_status"`
	TaciID        int64 `json:"taci_id"`
	TaciCartID    int32 `json:"taci_cart_id"`
	TaciProductID int32 `json:"taci_product_id"`
	TaciQty       int32 `json:"taci_qty"`
	TaciPrice     int32 `json:"taci_price"`
}

func (q *Queries) GetCartAndCartItemsByMemberIdAndActiveStatus(ctx context.Context, tacMemberID int32) (GetCartAndCartItemsByMemberIdAndActiveStatusRow, error) {
	row := q.db.QueryRow(ctx, getCartAndCartItemsByMemberIdAndActiveStatus, tacMemberID)
	var i GetCartAndCartItemsByMemberIdAndActiveStatusRow
	err := row.Scan(
		&i.TacID,
		&i.TacMemberID,
		&i.TacStatus,
		&i.TaciID,
		&i.TaciCartID,
		&i.TaciProductID,
		&i.TaciQty,
		&i.TaciPrice,
	)
	return i, err
}

const getCartByMemberId = `-- name: GetCartByMemberId :one
SELECT tac_id, tac_member_id, tac_total_price, tac_status
FROM public.tb_amole_cart
WHERE tac_member_id = $1 AND tac_status = 'ACTIVATE' LIMIT 1
`

func (q *Queries) GetCartByMemberId(ctx context.Context, tacMemberID int32) (TbAmoleCart, error) {
	row := q.db.QueryRow(ctx, getCartByMemberId, tacMemberID)
	var i TbAmoleCart
	err := row.Scan(
		&i.TacID,
		&i.TacMemberID,
		&i.TacTotalPrice,
		&i.TacStatus,
	)
	return i, err
}

const getCountCartActiveProduct = `-- name: GetCountCartActiveProduct :one
SELECT COUNT(taci.taci_id)
FROM public.tb_amole_cart as tac 
JOIN public.tb_amole_cart_items as taci ON taci.taci_cart_id=tac.tac_id
WHERE tac.tac_member_id = $1 AND tac.tac_status = 'ACTIVATE'
`

func (q *Queries) GetCountCartActiveProduct(ctx context.Context, tacMemberID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCartActiveProduct, tacMemberID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCart = `-- name: UpdateCart :exec
UPDATE public.tb_amole_cart
SET tac_member_id=$2, tac_total_price=$3,  tac_status=$4
WHERE tac_id = $1
`

type UpdateCartParams struct {
	TacID         int64  `json:"tac_id"`
	TacMemberID   int32  `json:"tac_member_id"`
	TacTotalPrice int32  `json:"tac_total_price"`
	TacStatus     string `json:"tac_status"`
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) error {
	_, err := q.db.Exec(ctx, updateCart,
		arg.TacID,
		arg.TacMemberID,
		arg.TacTotalPrice,
		arg.TacStatus,
	)
	return err
}
